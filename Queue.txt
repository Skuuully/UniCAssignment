#include <stdio.h>
#include <stdio.h>
#include <stdbool.h>
/* rear is the elements just arriving into the queue, front is elements about to leave
capacity is the number of elements that the queue can hold
size is the current number of elements in the queue*/
int capacity = 10;
int size = 0;
int rear = -1;
int front = -1;
int *queue;
bool dequeueRun = false;
int main()
{
    /*assigns memory for the queue*/
    queue = (int*)calloc(10, sizeof(int));
    /*for loop to queue integers for 1 through to 10*/
    for (int i = 1; i<=10; i++)
    {
        enqueue(i);
    }
    
    /* prints out the value at the front and then dequeues*/
    for(int i = 0; i <10; i++)
    {
        printf("%d \n", *(queue + front));
        dequeue();
    }
    return 0;
}

/*Checks if the queue is currently empty*/   
int isEmpty()
{
    if(size == 0)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}
/*Checks if the queue is currently full*/        
int isFull()
{
    if(size >= capacity)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}

/*Checks if the queue is full. If the queue is not full adds the element to the 
queue and increases the variables as well as setting the rear of the 
queue = to the number just added*/
int enqueue(int data)
{
    if (!isFull())
    {
        return 0;
    }
    if (front == -1)
    {
        front = 0;
    }
    rear++;
    size++;
    *(queue + rear) = data;
    return 1;
}
 
/*If the queue is not empty then it will remove the first element that was added to the queue*/  
int dequeue()
{
    if (!isEmpty())
    {
        return 0;
    }
    if (dequeueRun == false)
    {
        size--;
        dequeueRun = true;
    }
    int data = *(queue + front);
    front++;
    return data;
}
